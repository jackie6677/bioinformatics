

<html>
<head>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
 <script src="//netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
   		<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.17/jquery-ui.min.js"></script>
		<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.17/themes/smoothness/jquery-ui.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css">
        <!--<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.min.css">-->
        <script language="javascript" type="text/javascript" src="../js/rainbow.js"></script>
		

    <script type="text/javascript" src="../js/chroma.min.js"></script>
    
    <script src="http://d3js.org/d3.v3.min.js"></script>
	<!--<script src="http://cpettitt.github.io/project/dagre-d3/latest/dagre-d3.min.js"></script>-->
	<script language="javascript" type="text/javascript" src="../js/dagre-d3.min.js"></script>
    <script type="text/javascript">
    
    
    //Show UCLA CS class dependencies (not complete)

    </script>
    <style type="text/css">
      body {
      overflow: auto;
      }
      #header {
		background: #333;
		height: 35px;
		-webkit-box-shadow: 0 2px 3px rgba(0,0,0,.25);
		-moz-box-shadow: 0 2px 3px rgba(0,0,0,.25);
		box-shadow: 0 2px 3px rgba(0,0,0,.25);
		text-align: center;
		position: absolute;
		left: 0;
		width: 100%;
		
		color: white;
		}
		#search-txt{
		border-radius:5px;
		height:25px;
		margin-top:5px;
		}
		#settings {
		display:block;
		position: absolute;
		width: 190px;
		right: 20px;
		top: 50px;
		overflow-y: auto;
		}
		#settings > label {
		clear: both;
		float: left;
		margin-top: 6px;
		margin-right: 10px;
		width: 107px;
		}
		.settings-box {
		
		width: 100%;
		float: left;
		}
		svg {
	  		overflow: hidden;
	  		width:100%;
	  		height:100%;
		}

		text {
		  font-weight: 300;
		  font-family: "Helvetica Neue", Helvetica, Arial, sans-serf;
		  font-size: 14px;
		  cursor:pointer;
		}

		.node{
		  stroke: #222;
		  stroke-width: 2px;
		  fill: #fff;
		  cursor:pointer;
		}

		.edgeLabel rect {
			  fill: #fff;
		}

		.edgePath path {
		  stroke: #222;
		  stroke-width: 1.5px;
		  fill: none;
		}
		.status{
			color:#333;
		}
		#overlay-back {
		    position   : absolute;
		    top        : 0;
		    left       : 0;
		    width      : 100%;
		    height     : 100%;
		    background : #000;
		    opacity    : 0.6;
		    filter     : alpha(opacity=60);
		    z-index    : 5;
		    display    : none;
		}
		
		#overlay {
		    position : absolute;
		    top      : 200px;
		    left:0;
	        right:0;
	        margin-left:auto;
	        margin-right:auto;
		    width    : 300px;
		    height   : 100px;
		    z-index  : 10;
		    display  : none;
		} 

    </style>
</head>

<body>
<ul class="nav nav-tabs">
  <li class="active" id="mf"><a href="#">Molecular Function Terms</a></li>
  <li id="bp" data-toggle="tooltip" data-animation="false" data-placement="bottom" title="Render this branch will be sometimes slow since the large number of predicted terms"><a href="#">Biological Process Terms</a></li>
  <li id="cc"><a href="#">Cellular Component Terms</a></li>
  <li id="all" data-toggle="tooltip" data-animation="false" data-placement="bottom" title="Render all three branches together (Caution: will be slow)"><a href="#">All Terms</a></li>
</ul>
<div id="overlay-back"></div>
<div id="overlay"><div class="panel panel-default">
  <div class="panel-body">
    	Rendering Graph Please Wait...	</div>
  </div>
</div> 

<svg>
    <g transform="translate(20,20) scale(0.2)"/>
</svg>

<div id="settings">
  <h3>GO Visualizer</h3>
  <a href="#"> How to Use </a>
  <pre class="status">
  </pre>
  <pre><input type="checkbox" class="simple-relationship" name="" value=""> No parent recomputation when expanded (Faster)<br></pre>
  <label>
  <i data-toggle="tooltip" data-animation="false" data-placement="right" title="Show information for GO term when mouseover" style="margin-top:3px" class="glyphicon glyphicon-info-sign"></i>
  GO Term ID:
  </label><br>
  <pre id="go-id" style="margin-top:10px">all</pre>
  <label>
  
  GO Name:
  </label><br>
  <pre id="go-name" style="margin-top:10px">all</pre>
  
  <textarea style="margin-top:10px; display:none" class="form-control" id="submit-txt"></textarea>
  
  <label>Color Scheme</label>
  <button style="margin-top:10px" class="btn btn-default btn-primary form-control" id="match-path-btn" data-toggle="tooltip" data-animation="false" data-placement="top" title="Colors are based on number of predicted child nodes in the path">Number of Pred. Nodes</button>
  <button style="margin-top:10px" class="btn btn-default btn-primary form-control" id="match-path-score-btn" data-toggle="tooltip" data-animation="false" data-placement="top" title="Colors are based on the prediction score">Score</button>
  
  <br>
  <!--<button style="margin-top:10px" class="btn btn-default btn-primary" id="match-path-score2-btn">Score Submit</button>-->
  <button style="margin-top:10px" class="btn btn-default form-control" id="reset-btn">Reset All</button>
	<br>
	<h3>Graph Direction</h3>
	<button style="margin-top:10px" class="btn btn-default form-control" id="rotate">Top-Down Graph</button>
	<button style="margin-top:10px" class="btn btn-default form-control" id="rotate-back">Left-Right Graph</button>
</div>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
<script>
// Create a new directed graph
$(".glyphicon-info-sign").tooltip();
$(".btn").tooltip();
$("#bp").tooltip();
$("#all").tooltip();
var g = new dagreD3.Digraph();
var expandedNodes = {};
// Add nodes to the graph. The first argument is the node id. The second is
// metadata about the node. In this case we're going to add labels to each of
// our nodes.
g.addNode("all",    { label: "<div class='term' style='padding: 10px;'>all</div>" });
g.addNode("GO:0008150", {label: "<div class='term' style='padding: 10px;'>biological_process</div>"});
g.addNode("GO:0005575", {label: "<div class='term' style='padding: 10px;'>cellular_component</div>"});
g.addNode("GO:0003674", {label: "<div class='term' style='padding: 10px;'>molecular_function</div>"});

// Add edges to the graph. The first argument is the edge id. Here we use null
// to indicate that an arbitrary edge id can be assigned automatically. The
// second argument is the source of the edge. The third argument is the target
// of the edge. The last argument is the edge metadata.

//g.addEdge(null, "kspacey",   "swilliams", { label: "K-PAX" });
g.addEdge(null, "all","GO:0008150");
g.addEdge(null, "all","GO:0005575");
g.addEdge(null, "all","GO:0003674");
console.log(g);
/*
if (window.XMLHttpRequest)
  {
  xhttp=new XMLHttpRequest();
  }
else // code for IE5 and IE6
  {
  xhttp=new ActiveXObject("Microsoft.XMLHTTP");
  }
 

xhttp.open("GET","test.xml",false);
xhttp.send();
xmlDoc=xhttp.responseXML;
xmlDoc.async = false;
console.log(xmlDoc);
x=xmlDoc.getElementsByTagName("GO_TERM");
for (var i = 0; i < x.length; i++) {   
    var node = x[i].firstChild.nodeValue;
    var prev = $("#submit-txt").text();
    console.log(node);
    prev += node;
    prev += '\n';
	$("#submit-txt").text(prev);
} 
setTimeout(function (){

            	$(".status").text("rendering graph...");
				
			}, 1500);


			setTimeout(function (){

            	$( "#match-path-btn" ).trigger( "click" );
            
			}, 2000);
			*/   
var layout = dagreD3.layout()
                    .nodeSep(10)
                    .rankDir("TD");
var job_id;

//initialize the graph by get predicted terms from the api...
<%if job_id %>
		job_id = "<%= job_id %>";
		var res = job_id.split("_");
		
        $.get("http://kiharalab.org/web/visualizer.php?job_id="+res[0],function(data){
	       //console.log(data);
	       parser=new DOMParser();
			 var esg = 0;
			xmlDoc=parser.parseFromString(data,"text/xml");
			if(res[1] != ""){
				console.log(res[1]);
				var index = res[1]-1;
				xmlDoc = xmlDoc.getElementsByTagName("sequence")[index];
				
			}
			x=xmlDoc.getElementsByTagName("GO_TERM");
			y=xmlDoc.getElementsByTagName("normalized_raw_score");
			z=xmlDoc.getElementsByTagName("category");
			
			//esg xml option
			//different tags names for xml file of esg
			if(x.length == 0){
				
				x=xmlDoc.getElementsByTagName("term");
				y=xmlDoc.getElementsByTagName("probability");
				z=xmlDoc.getElementsByTagName("type");
				esg = 1;
			}
			
			var graph_node_num = 0;
			
			//redener only MF branch first
			//User can switch branches by using the tabs provided
			//console.log(y.length + " "+ z.length);	
			for (var i = 0; i < y.length; i++) {
			   if(esg == 0){
					if(z[i].firstChild.nodeValue != "f")continue;
			   }
			   else{
					//console.log(y[i].firstChild.nodeValue+" "+z[i].firstChild.nodeValue);

					if(z[i].firstChild.nodeValue != "MF")continue;

			   }  
			   //ignore the probability smaller than 5%
			   if(y[i].firstChild.nodeValue < 0.05)continue;
			   var node = x[i].firstChild.nodeValue;
			   var prev = $("#submit-txt").text();
			   //console.log(node);
			   prev += node;
			   prev += " ";
			   if(y[i].firstChild.nodeValue.length>5){
			   prev += y[i].firstChild.nodeValue.substring(0,5);}
			   else prev += y[i].firstChild.nodeValue;
			   prev += '\n';
			   graph_node_num += 1;
			   $("#submit-txt").text(prev);
			}  
			//var r = confirm("The graph will take some time to render please wait...");
			//if(r == true){
			
			//trigger the event 
			if($("#submit-txt").text().length > 0){
				$('#overlay, #overlay-back').fadeIn(500);
				$(".status").text("rendering graph...");
				$('.status').change();
				$( "#match-path-score-btn" ).trigger( "click" );
				//}
				
				//make the edge length longger if number of predicted terms is larger than 50
				if(graph_node_num > 50)layout = dagreD3.layout()
	                    .nodeSep(10).rankSep(200)
	                    .rankDir("TD");
                    
            }
           
        });
<%end%>
		
		//initialize the graph library api
		//set the initial scale and translate rate
		//should set both below and the svg dom in html
		var renderer = new dagreD3.Renderer();
		
		renderer.layout(layout).run(g, d3.select("svg g"));
		var svg = d3.select("svg");
		var zoom = d3.behavior.zoom().translate([20,20]).scale(.2);
		//console.log(svg);
 		d3.select("svg")
        .call(zoom.on("zoom", function() {
          var ev = d3.event;
          var scale = ev.scale;
          svg.select("g")
            .attr("transform", "translate(" + ev.translate + ") scale(" + scale + ")");
        }));
/*
var nodes = d3.selectAll(".node"); 
nodes.on("click",function(){
	console.log(nodes.select("tspan")[0]); 
});

$(".node g text tspan").click(function(){

	console.log(this);
});
console.log(nodes);   */

		//The event that hover a term node on the graph, should get the term_id and name
		
		
		
 		$("svg").on('mouseover', '.node g', function (event){
	 		var cur = $(this).children();
			//console.log(cur);
			var name = cur.text();
			console.log(name);
			g.eachNode(function(u, value) {
			    var tmp_value = value.label;
			    tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
			    var tmp_name = value.label.replace(/<br>/g,' ');
			    tmp_name = tmp_name.replace(/<(?:.|\n)*?>/gm, '');
			    tmp_name = tmp_name.replace(/[0-9]*\.[0-9]*%/gm, '');
				//console.log(tmp_value);
    			if(name === tmp_value){
    			$("#go-id").text(u);
                $("#go-name").text(tmp_name);
    			
    			}
			});
 		});
 		
 		//The event that click on a node on the graph, should expand the node to show the children of that node...
 		$("svg").on('click', '.node', function (event){
	 		clickNode(this);
 		});
 		
		
 		//Check if current graph has any parent for the expanded children nodes...
		function getResults(Node, index, length){
		      //console.log(Node);
		      $.getJSON("http://dragon.bio.purdue.edu:4567/get_parent/"+Node+"", function(pjson){
		          //console.log(pjson);
		          for(var j=0; j<Object.keys(pjson).length;j++){
			      g.eachNode(function(u,value){
			          if(u == pjson[j].id){
			          	if(!g.hasEdge(pjson[j].id+"-"+Node)){
			          		g.addEdge(pjson[j].id+"-"+Node, pjson[j].id, Node);
			          		console.log(pjson[j].id+"-"+Node);
			          	}
				  	   }
			      });
			      function transition(selection) {
        			return selection.transition().duration(400);
      			  }
			      //renderer.transition(transition);
				  
			  }
				if(index == length -1 ){renderer.layout(layout).run(g, d3.select("svg g"));
					if(color_score == 0){
						paintParents();
						paintNode();
					}
					if(color_score === 1){
			        	//updateGraphScore();
			        	//renderer.layout(layout).run(g, d3.select("svg g"));
						paintNodeScore();
			        }
				}
				
			
		      }); 
		   
		   }

		  function clickNode(clickedNode){
			var g_term;
			var name = $(clickedNode).find("g").text();
			console.log(name);
			
			if(expandedNodes[name] == undefined){
				expandedNodes[name] = 0;
			}else{
				$(".status").text("Already Expanded");
				$(".status").change();
				return;
			}
			
			g.eachNode(function(u, value) {
				//console.log(value);
				var tmp_value = value.label;
			    tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
			    
    			if(name === tmp_value){
    				g_term = u;
    			
    			
    			}
			});
			
			$(".status").text("loading "+g_term+"...");
			$('.status').change();
			if(g_term == "all"){$(".status").text("done");$('.status').change();return;}
			
			$.getJSON("http://dragon.bio.purdue.edu:4567/get_children/"+g_term+"",function(json){
    		
    		console.log("finish"); 
			for(var i = 0; i< Object.keys(json).length; i++){
				//console.log(json[i].id);
 
				if(!g.hasNode(json[i].id)){g.addNode(json[i].id,{label:"<div class='term' style='padding: 10px; text-align:center;'>"+json[i].name.replace(/ /g,"<br>")+"</div>"});
				//check parents but affect speed of rendering
				if(!$('.simple-relationship').is(':checked'))getResults(json[i].id, i , Object.keys(json).length);
				
				}
				if(!g.hasEdge(g_term+"-"+json[i].id))g.addEdge(g_term+"-"+json[i].id, g_term, json[i].id);
				
		
			}
			function transition(selection) {
        		return selection.transition().duration(400);
      		}
			//transition
      		//renderer.transition(transition);
			renderer.layout(layout).run(g, d3.select("svg g"));
			if(color_score==0){
				paintParents();
        		paintNode();
        	}
        	if(color_score === 1){
			        	//updateGraphScore();
			        	//renderer.layout(layout).run(g, d3.select("svg g"));
						paintNodeScore();
			}
        	$(".status").text("done");	
			$('.status').change();
        	
			});
}
var color_score = 0;
var arrayNodes = new Array();
var hash = {};
var hash_score = {};
var total_go = 0;

$("#mf").click(function(){
	$("#all").removeClass("active");
	$("#bp").removeClass("active");
	$("#mf").removeClass("active");
	$("#cc").removeClass("active");
	$(this).toggleClass("active");
	//event.preventDefault();
	$("#submit-txt").text("");
	$.get("http://kiharalab.org/web/visualizer.php?job_id=<%= job_id %>",function(data){
	       //console.log(data);
	       parser=new DOMParser();
	       var esg = 0;
			xmlDoc=parser.parseFromString(data,"text/xml");
			if(res[1] != ""){
				var index = res[1]-1;
				xmlDoc = xmlDoc.getElementsByTagName("sequence")[index];
				
			}
			x=xmlDoc.getElementsByTagName("GO_TERM");
			y=xmlDoc.getElementsByTagName("normalized_raw_score");
			z=xmlDoc.getElementsByTagName("category");
			if(x.length == 0){
				
				x=xmlDoc.getElementsByTagName("term");
				y=xmlDoc.getElementsByTagName("probability");
				z=xmlDoc.getElementsByTagName("type");
				esg = 1;
			}
			
			var graph_node_num = 0;
			for (var i = 0; i < y.length; i++) {
				if(esg == 0){
					if(z[i].firstChild.nodeValue != "f")continue;
				}
				else{
					//console.log(x[i].firstChild.nodeValue);
					if(z[i].firstChild.nodeValue != "MF")continue;

				}
				if(y[i].firstChild.nodeValue < 0.05)continue;
			   var node = x[i].firstChild.nodeValue;
			   var prev = $("#submit-txt").text();
			   //console.log(node);
			   prev += node;
			   prev += " ";
			   if(y[i].firstChild.nodeValue.length>5){
			   prev += y[i].firstChild.nodeValue.substring(0,5);}
			   else prev += y[i].firstChild.nodeValue;
			   prev += '\n';
			   graph_node_num += 1;
			$("#submit-txt").text(prev);
			}  
			//var r = confirm("The graph will take some time to render please wait...");
			//if(r == true){
			$('#overlay, #overlay-back').fadeIn(500);
			$(".status").text("rendering graph...");
			$('.status').change();
			$( "#match-path-score-btn" ).trigger( "click" );
			//}
			if(graph_node_num > 50)layout = dagreD3.layout()
                    .nodeSep(10).rankSep(200)
                    .rankDir("TD");
        
        });	
});

$("#bp").click(function(){
	$("#all").removeClass("active");
	$("#bp").removeClass("active");
	$("#mf").removeClass("active");
	$("#cc").removeClass("active");
	$(this).toggleClass("active");
	//event.preventDefault();
	$("#submit-txt").text("");
	$.get("http://kiharalab.org/web/visualizer.php?job_id=<%= job_id %>",function(data){
	       //console.log(data);
	       parser=new DOMParser();
	       var esg = 0;
			xmlDoc=parser.parseFromString(data,"text/xml");
			if(res[1] != ""){
				var index = res[1]-1;
				xmlDoc = xmlDoc.getElementsByTagName("sequence")[index];
				
			}
			x=xmlDoc.getElementsByTagName("GO_TERM");
			y=xmlDoc.getElementsByTagName("normalized_raw_score");
			z=xmlDoc.getElementsByTagName("category");
			if(x.length == 0){
				
				x=xmlDoc.getElementsByTagName("term");
				y=xmlDoc.getElementsByTagName("probability");
				z=xmlDoc.getElementsByTagName("type");
				esg = 1;
			}
			
			var graph_node_num = 0;
			for (var i = 0; i < y.length; i++) {
				if(esg == 0){
					if(z[i].firstChild.nodeValue != "p")continue;
				}
				else{
					if(z[i].firstChild.nodeValue != "BP")continue;

				}
				if(y[i].firstChild.nodeValue < 0.05)continue;
			   var node = x[i].firstChild.nodeValue;
			   var prev = $("#submit-txt").text();
			   console.log(node);
			   prev += node;
			   prev += " ";
			   if(y[i].firstChild.nodeValue.length>5){
			   prev += y[i].firstChild.nodeValue.substring(0,5);}
			   else prev += y[i].firstChild.nodeValue;
			   prev += '\n';
			   graph_node_num += 1;
			$("#submit-txt").text(prev);
			}  
			//var r = confirm("The graph will take some time to render please wait...");
			//if(r == true){
			$('#overlay, #overlay-back').fadeIn(500);
			$(".status").text("rendering graph...");
			$('.status').change();
			$( "#match-path-score-btn" ).trigger( "click" );
			//}
			if(graph_node_num > 50)layout = dagreD3.layout()
                    .nodeSep(10).rankSep(200)
                    .rankDir("TD");
        
        });	
});

$("#cc").click(function(){
	$("#all").removeClass("active");
	$("#bp").removeClass("active");
	$("#mf").removeClass("active");
	$("#cc").removeClass("active");
	$(this).toggleClass("active");
	//event.preventDefault();
	$("#submit-txt").text("");
	$.get("http://kiharalab.org/web/visualizer.php?job_id=<%= job_id %>",function(data){
	       //console.log(data);
	       parser=new DOMParser();
	       var esg = 0;
			xmlDoc=parser.parseFromString(data,"text/xml");
			if(res[1] != ""){
				var index = res[1]-1;
				xmlDoc = xmlDoc.getElementsByTagName("sequence")[index];
				
			}
			x=xmlDoc.getElementsByTagName("GO_TERM");
			y=xmlDoc.getElementsByTagName("normalized_raw_score");
			z=xmlDoc.getElementsByTagName("category");
			if(x.length == 0){
				x=xmlDoc.getElementsByTagName("term");
				y=xmlDoc.getElementsByTagName("probability");
				z=xmlDoc.getElementsByTagName("type");
				esg = 1;
			}
			
			var graph_node_num = 0;
			for (var i = 0; i < y.length; i++) {
				if(esg == 0){
					if(z[i].firstChild.nodeValue != "c")continue;
				}
				else{
					if(z[i].firstChild.nodeValue != "CC")continue;

				}
				if(y[i].firstChild.nodeValue < 0.05)continue;
			   var node = x[i].firstChild.nodeValue;
			   var prev = $("#submit-txt").text();
			   console.log(node);
			   prev += node;
			   prev += " ";
			   if(y[i].firstChild.nodeValue.length>5){
			   prev += y[i].firstChild.nodeValue.substring(0,5);}
			   else prev += y[i].firstChild.nodeValue;
			   prev += '\n';
			   graph_node_num += 1;
			$("#submit-txt").text(prev);
			}  
			//var r = confirm("The graph will take some time to render please wait...");
			//if(r == true){
			$('#overlay, #overlay-back').fadeIn(500);
			$(".status").text("rendering graph...");
			$('.status').change();
			$( "#match-path-score-btn" ).trigger( "click" );
			//}
			if(graph_node_num > 50)layout = dagreD3.layout()
                    .nodeSep(10).rankSep(200)
                    .rankDir("TD");
        
        });	
});

$("#all").click(function(){
	
	$("#all").removeClass("active");
	$("#bp").removeClass("active");
	$("#mf").removeClass("active");
	$("#cc").removeClass("active");
	$(this).toggleClass("active");
	//event.preventDefault();
	$("#submit-txt").text("");
	$.get("http://kiharalab.org/web/visualizer.php?job_id=<%= job_id %>",function(data){
	       //console.log(data);
	       parser=new DOMParser();
	       var esg = 0;
			xmlDoc=parser.parseFromString(data,"text/xml");
			if(res[1] != ""){
				var index = res[1]-1;
				xmlDoc = xmlDoc.getElementsByTagName("sequence")[index];
				
			}
			x=xmlDoc.getElementsByTagName("GO_TERM");
			y=xmlDoc.getElementsByTagName("normalized_raw_score");
			
			if(x.length == 0){
				x=xmlDoc.getElementsByTagName("term");
				y=xmlDoc.getElementsByTagName("probability");
				
				esg = 1;
			}
			
			var graph_node_num = 0;
			for (var i = 0; i < y.length; i++) {
				
				if(y[i].firstChild.nodeValue < 0.05)continue;
			   var node = x[i].firstChild.nodeValue;
			   var prev = $("#submit-txt").text();
			   console.log(node);
			   prev += node;
			   prev += " ";
			   if(y[i].firstChild.nodeValue.length>5){
			   prev += y[i].firstChild.nodeValue.substring(0,5);}
			   else prev += y[i].firstChild.nodeValue;
			   prev += '\n';
			   graph_node_num += 1;
			$("#submit-txt").text(prev);
			}  
			//var r = confirm("The graph will take some time to render please wait...");
			//if(r == true){
			$('#overlay, #overlay-back').fadeIn(500);
			$(".status").text("rendering graph...");
			$('.status').change();
			$( "#match-path-score-btn" ).trigger( "click" );
			//}
			if(graph_node_num > 50)layout = dagreD3.layout()
                    .nodeSep(10).rankSep(200)
                    .rankDir("TD");
        
        });	
});


$("#rotate").click(function(){
layout = dagreD3.layout()
                    .nodeSep(10).rankSep(200)
                    .rankDir("TD");
		renderer.layout(layout).run(g, d3.select("svg g"));
		if(color_score==0){
			paintParents();
			paintNode();
		}
		if(color_score === 1){
			        	updateGraphScore();
			        	renderer.layout(layout).run(g, d3.select("svg g"));
						paintNodeScore();
						}
});

$("#rotate-back").click(function(){
layout = dagreD3.layout()
                    .nodeSep(10).rankSep(200)
                    .rankDir("LR");
		renderer.layout(layout).run(g, d3.select("svg g"));
		if(color_score==0){
			paintParents();
			paintNode();
		}
		if(color_score === 1){
			        	updateGraphScore();
			        	renderer.layout(layout).run(g, d3.select("svg g"));
						paintNodeScore();
			        }
});

// paint all the targeted nodes
	function paintNode(){
	
	arrayNodes.forEach(function(node){
		  //var nodeUI = graphics.getNodeUI(node);
		  //if(nodeUI != null)
		  //nodeUI.childNodes[0].attr('stroke','#555').attr('stroke-width','5');
		  g.eachNode(function(u, value) {
				//console.log(value);
    			if(node === u){
    				$(".node").each(function(index){
    					var name = $(this).find("g").text();
    					 var tmp_value = value.label;
						 tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
    					if(tmp_value === name){
    						//console.log("color"+this);
    						//$(this).find("rect").css("fill","#AEF89F");
    						$(this).find("rect").css("stroke-width","10");
    						$(this).find("rect").css("stroke","#333");
    					}
    				});
    			
    			}
			});
		});
	
	
	}
	
	// paint all the targeted nodes based on score
	function paintNodeScore(){
		
		  var keys = Object.keys(hash_score);
		  var max = 0;
		  var min = 1000;
		  keys.forEach(function(k){
		     if(hash_score[k]>max)max = hash_score[k]; 
		      if(hash_score[k]<min)min = hash_score[k];
		  });
		  
		  //var color_string = "lightyellow, orange, deeppink, darkred";
		  //var color_string = "#FFD5D7, red";
		  var color_string = "lightyellow,red";
		  //var color_string ="#41B7C5, #F03B20";
		  
		  var colors = color_string.replace(/(, *| +)/g, ',').split(',');
		  var steps = 100;
		  colors = chroma.interpolate.bezier(colors);
		  var cs = chroma.scale(colors).mode('lab').correctLightness(true);
		   
		  //var colors = get_hex(10);
		  
        	keys.forEach(function(k){
		     
		   
		    g.eachNode(function(u, value) {
				//console.log(value);
    			if(k === u){
    				$(".node").each(function(index){
    					var name = $(this).find("g").text();
    					var tmp_value = value.label;
						 tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
    					if(tmp_value === name){
    						//console.log("color"+colors[100-Math.round(hash_score[k]*100)]);
    						//value.label = name + "("+hash_score[k]+")";
    						$(this).find("rect").css("fill",cs((hash_score[k]-min)/(max-min)).hex());
    						//$(this).find("g ").append("<text>"+hash_score[k]+"</text>");
    					}
    				});
    			
    			}
			});
		  
		  });
		  
		  
	
	
	}
	
	function updateGraphScore(){
		var keys = Object.keys(hash_score);
		keys.forEach(function(k){
		     
		   
		    g.eachNode(function(u, value) {
				//console.log(value);
    			if(k === u){
    				$(".node").each(function(index){
    					var name = $(this).find("g").text();
    					var tmp_value = value.label;
    					//tmp_value = tmp_value.replace(/<br>/g," ");
						tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
    					if(tmp_value === name){
    						console.log(name);
    						//console.log("color"+colors[100-Math.round(hash_score[k]*100)]);
    						//value.label = value.label + "<center>(<b>"+hash_score[k]+"</b>)</center>";
    						
    						//make the predicted terms bigger
    						var buff = value.label.replace(/<div(?:.|\n)*?>/gm, '<div class=\'term\' style=\'padding: 10px; text-align:center; font-size:40\'>');
    						var re = /font-size\:50/;
							var tmp = re.exec(buff);
           
				           	if(tmp==null){
				           		//console.log("here"+tmp);
				           		value.label = buff + "<center><span style=\"font-size:50; padding:15px;\"><b>"+(hash_score[k]*100).toFixed(1)+"%</b></span></center>";
							}

    						    						
    					}
    				});
    			
    			}
			});
		  
		  });
		  
	}

		function get_hex(number){
        		var numberOfItems = number;
				var rainbow = new Rainbow(); 
				rainbow.setNumberRange(1, numberOfItems);
				rainbow.setSpectrum('red', 'white');
				var s = new Array;
				for (var i = 1; i <= numberOfItems; i++) {
    				var hexColour = rainbow.colourAt(i);
    				s.push('#' + hexColour);
    				//s += '#' + hexColour + ', ';
				}
				return s;
        }
        
        function paintParents(){
          //console.log(hash);
          var keys = Object.keys(hash);
		  var max = 0;
		  keys.forEach(function(k){
		     if(hash[k]>max)max = hash[k]; 
		  });
		  //console.log(max);
		  if(max>0){
			 var colors = get_hex(max+2);
			
			  
        	keys.forEach(function(k){
		     
		   
		    g.eachNode(function(u, value) {
				//console.log(value);
    			if(k === u){
    				$(".node").each(function(index){
    					var name = $(this).find("g").text();
    					var tmp_value = value.label;
						tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
    					if(tmp_value === name){
    						//console.log("color"+this);
    						$(this).find("rect").css("fill",colors[(max-hash[k])]);
       					}
    				});
    			
    			}
			});
		  
		  });
		  }
		  
        }
/*
 setInterval(function(){
 	paintParents();
 	paintNode();
 },500);*/

$('.status').change(function(){
      //Do what you want when div changes
      console.log($(".status").text());
      if($(".status").text() == "done"){
	      setTimeout(function() {
		    $(".status").hide();
		  }, 2000);
      }
      else{
	      $(".status").show();
      }
});


$("#reset-btn").click(function(event){
	total_go = 0;
	event.preventDefault();
	g = new dagreD3.Digraph();
	expandedNodes = {};
	arrayNodes = new Array();
	hash = {};
	color_score = 0;
	
	// Add nodes to the graph. The first argument is the node id. The second is
	// metadata about the node. In this case we're going to add labels to each of
	// our nodes.
	g.addNode("all",    { label: "<div class='term' style='padding: 10px;'>all</div>" });
	g.addNode("GO:0008150", {label: "<div class='term' style='padding: 10px;'>biological_process</div>"});
	g.addNode("GO:0005575", {label: "<div class='term' style='padding: 10px;'>cellular_component</div>"});
	g.addNode("GO:0003674", {label: "<div class='term' style='padding: 10px;'>molecular_function</div>"});
	
	
	// Add edges to the graph. The first argument is the edge id. Here we use null
	// to indicate that an arbitrary edge id can be assigned automatically. The
	// second argument is the source of the edge. The third argument is the target
	// of the edge. The last argument is the edge metadata.
	
	//g.addEdge(null, "kspacey",   "swilliams", { label: "K-PAX" });
	g.addEdge(null, "all","GO:0008150");
	g.addEdge(null, "all","GO:0005575");
	g.addEdge(null, "all","GO:0003674");
	function transition(selection) {
	        		return selection.transition().duration(400);
	      		}
				//transition
	//renderer.transition(transition);
	renderer.layout(layout).run(g, d3.select("svg g"));
		
});

  $("#match-path-btn").click(function(event){
  		 	arrayNodes = new Array();
  			total_go = 0;
  			 //clear hash array
  			expandedNodes = {};
  			hash = {};
  			color_score = 0;
    		
    		g = new dagreD3.Digraph();
            event.preventDefault();
            var temp_terms = $("#submit-txt").val().split("\n");
            
            var re = /GO\:\d{7}/;
            var g_terms = new Array();
            temp_terms.forEach(function(entry){
                console.log(entry);
            var tmp = re.exec(entry);
            //console.log(tmp);
           
            if(tmp!=null)g_terms.push(tmp[0]);
            });
   
            count = 0;
            var node_index = 0;
            g_terms.forEach(function(id){
            	node_index ++;
            	//window.setTimeout(function(){
            	arrayNodes.push(id);
            	matchPath(id,node_index,g_terms.length,0);
            	//},500);
            	count++;
           
            });
            
            setTimeout(function() {
		    if (total_go < arrayNodes.length )
		    {
		        // Handle error accordingly
		        alert("We have a problem loading all GO terms");
		        renderer.layout(layout).run(g, d3.select("svg g"));
		        $(".status").text("done");
		        $('.status').change();
				$('#overlay, #overlay-back').fadeOut(500);
				updateGraphScore();
		        renderer.layout(layout).run(g, d3.select("svg g"));
				paintNodeScore();
		    }
			}, 10000);
            //console.log(count);

    });
    

    $("#match-path-score-btn").click(function(event){
    		arrayNodes = new Array();
    		total_go = 0;
  			expandedNodes = {};
  			hash_score = {};
  			color_score = 1;
    		
    		g = new dagreD3.Digraph();
            event.preventDefault();
            var temp_terms = $("#submit-txt").val().split("\n");
            
            var re = /GO\:\d{7}/;
            var prob = /\d*(\.\d+)?$/;
            var g_terms = new Array();
            temp_terms.forEach(function(entry){
                console.log("entry:"+entry);
            var tmp = re.exec(entry);
            var prob_temp = prob.exec(entry);
            
            //console.log(prob_temp);
           	if(tmp!=null && prob_temp != null){
           		if(hash_score[tmp[0]] == undefined){
				hash_score[tmp[0]] = prob_temp[0];
				}
			}
            if(tmp!=null)g_terms.push(tmp[0]);
            
            
            });
   				
           	var node_index = 0;
            g_terms.forEach(function(id){
            	node_index ++;
            	//window.setTimeout(function(){
            	arrayNodes.push(id);
            	matchPath(id,node_index,g_terms.length,1);
            	//},500);

            });
            setTimeout(function() {
		    if (total_go < arrayNodes.length )
		    {
		        // Handle error accordingly
		        alert("We have a problem loading all GO terms");
		        renderer.layout(layout).run(g, d3.select("svg g"));
		        $(".status").text("done");
		        $('.status').change();
				$('#overlay, #overlay-back').fadeOut(500);
				updateGraphScore();
		        renderer.layout(layout).run(g, d3.select("svg g"));
				paintNodeScore();
		    }
			}, 10000);
            
            console.log(hash_score);
            
    });
    
    $("#match-path-score2-btn").click(function(event){
    		arrayNodes = new Array();
    		total_go = 0;
  			expandedNodes = {};
  			hash_score = {};
    		color_score = 1;
    		
    		g = new dagreD3.Digraph();
            event.preventDefault();
            var temp_terms = $("#submit-txt").val().split("\n");
            
            var re = /GO\:\d{7}/;
            var prob = /\d*(\.\d+)?$/;
            
            var g_terms = new Array();
            temp_terms.forEach(function(entry){
            	var row = entry.split("\t");
            	
                console.log("entry:"+row[0]);
            	var tmp = "GO:"+row[0];
            	var prob_temp = row[9];
            
            //console.log(prob_temp);
           	if(tmp!=null && prob_temp != null){
           		if(hash_score[tmp] == undefined){
				hash_score[tmp] = prob_temp;
				}
			}
            if(tmp!=null)g_terms.push(tmp);
            
            
            });
			
           	var node_index = 0;
            g_terms.forEach(function(id){
            	node_index ++;
            	//window.setTimeout(function(){
            	arrayNodes.push(id);
            	matchPath(id,node_index,g_terms.length,1);
            	//},500);

            });
            
            setTimeout(function() {
		    if (total_go < arrayNodes.length )
		    {
		        // Handle error accordingly
		        alert("We have a problem loading all GO terms");
		        renderer.layout(layout).run(g, d3.select("svg g"));
		        $(".status").text("done");
		        $('.status').change();
				$('#overlay, #overlay-back').fadeOut(500);
				updateGraphScore();
		        renderer.layout(layout).run(g, d3.select("svg g"));
				paintNodeScore();
		    }
			}, 20000);
            console.log(hash_score);
            
    });
	
	
	
	
	
    // only showing nodes on path
    function matchPath(term,count,length,color_score){
        	 var g_term = term;
      $.getJSON("http://dragon.bio.purdue.edu:4567/get_path/"+g_term+"",function(json){
      	total_go++;
      	
      	console.log(term+" "+count+" "+length+" "+total_go);
        var myjson = [];
        var counter = 0;
		for(var i = 0; i< Object.keys(json).length; i++){
			if(hash[json[i].id] == undefined){
				hash[json[i].id] = 0;
			}
			else hash[json[i].id]++;
			var my_term_name;
			if(json[i].name.split(",").length - 1 >0){
				my_term_name = json[i].name.replace(/,/g,",<br>");
				//my_term_name = json[i].name.replace(/ /g,"<br>");
			}
			else{
				my_term_name = json[i].name.replace(/ /g,"<br>");
			}
			//if(json[i].id=="all")continue;
			//font-size:50
			
			if(!g.hasNode(json[i].id))g.addNode(json[i].id,{label:"<div class='term' style='padding: 10px; text-align:center; '>"+my_term_name+"</div>"});
			
 	 		
 
 	 	for(var j = 0; j< Object.keys(json[i].children).length; j++){
	 	
	 		my_term_name;
			if(json[i].children[j].name.split(",").length - 1 >0){
				my_term_name = json[i].children[j].name.replace(/,/g,"<br>");
				//my_term_name = json[i].children[j].name.replace(/ /g,"<br>");
			}
			else{
				my_term_name = json[i].children[j].name.replace(/ /g,"<br>");
			}
		
		if(!g.hasNode(json[i].children[j].id))g.addNode(json[i].children[j].id,{label:"<div class='term' style='padding: 10px; text-align:center;'>"+my_term_name+"</div>"});
		
		
			
			if(!g.hasEdge(json[i].id+"-"+json[i].children[j].id)){g.addEdge(json[i].id+"-"+json[i].children[j].id, json[i].id, json[i].children[j].id);
				console.log(json[i].id+"->"+ json[i].children[j].id);				
			}
		}
		
		}
		function defaultTransition(selection) {
		  return selection;
		}

		function continueExecution(){
		
		}
		//console.log(renderer.transition(defaultTransition));
		//console.log("aaaa:"+count+" "+length);
		//render.layout(layout).run(g, d3.select("svg g"));
		if(length>5 && length < 10)layout = dagreD3.layout()
                    .nodeSep(30).rankSep(200)
                    .rankDir("TD");
		
		if(length>10)layout = dagreD3.layout()
                    .nodeSep(50).rankSep(400)
                    .rankDir("TD");
		
		if(total_go == length){
		
		renderer.layout(layout).run(g, d3.select("svg g"));
		$(".status").text("done");
		$('.status').change();
		$('#overlay, #overlay-back').fadeOut(500);
			
		if(color_score === 0){paintParents();
        	paintNode();
        	}
        else if(color_score === 1){
        	updateGraphScore();
        	renderer.layout(layout).run(g, d3.select("svg g"));
			paintNodeScore();
        	}
       	}
	
		
		  
 
	});
}



</script>
</body>

</html>

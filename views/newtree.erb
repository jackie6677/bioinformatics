<!-- # GO Visualizer is  released under the terms of the GNU Lesser General Public License Ver.2.1. 
# https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html
-->

<html>
<head>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
 <script src="//netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
   		<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.17/jquery-ui.min.js"></script>
		<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.17/themes/smoothness/jquery-ui.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css">
        <!--<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.min.css">-->
        <script language="javascript" type="text/javascript" src="../../../js/rainbow.js"></script>
		
		<script language="javascript" type="text/javascript" src="../../../js/randomColor.js"></script>
    <script type="text/javascript" src="../../../js/chroma.min.js"></script>
    
    <script src="http://d3js.org/d3.v3.min.js"></script>
	<!--<script src="http://cpettitt.github.io/project/dagre-d3/latest/dagre-d3.min.js"></script>-->
	<script language="javascript" type="text/javascript" src="../../../js/dagre-d3.min.js"></script>
    <script type="text/javascript">
    
    
    //Show UCLA CS class dependencies (not complete)

    </script>
    <style type="text/css">
    	/* tables */
table.tablesorter {
	font-family:arial;
	background-color: #CDCDCD;
	margin:10px 0pt 15px;
	font-size: 8pt;
	width: 100%;
	text-align: left;
}
table.tablesorter thead tr th, table.tablesorter tfoot tr th {
	background-color: #e6EEEE;
	border: 1px solid #FFF;
	font-size: 8pt;
	padding: 4px;
}
table.tablesorter thead tr .header {
	background-image: url(bg.gif);
	background-repeat: no-repeat;
	background-position: center right;
	cursor: pointer;
}
table.tablesorter tbody td {
	color: #3D3D3D;
	padding: 4px;
	background-color: #FFF;
	vertical-align: top;
}
table.tablesorter tbody tr.odd td {
	background-color:#F0F0F6;
}
table.tablesorter thead tr .headerSortUp {
	background-image: url(asc.gif);
}
table.tablesorter thead tr .headerSortDown {
	background-image: url(desc.gif);
}
table.tablesorter thead tr .headerSortDown, table.tablesorter thead tr .headerSortUp {
background-color: #8dbdd8;
}

    
    
      body {
      overflow: auto;
      }
      #header {
		background: #333;
		height: 35px;
		-webkit-box-shadow: 0 2px 3px rgba(0,0,0,.25);
		-moz-box-shadow: 0 2px 3px rgba(0,0,0,.25);
		box-shadow: 0 2px 3px rgba(0,0,0,.25);
		text-align: center;
		position: absolute;
		left: 0;
		width: 100%;
		
		color: white;
		}
		#search-txt{
		border-radius:5px;
		height:25px;
		margin-top:5px;
		}
		#settings {
		display:block;
		position: absolute;
		width: 190px;
		right: 20px;
		top: 20px;
		overflow-y: auto;
		}
		#settings > label {
		clear: both;
		float: left;
		margin-top: 6px;
		margin-right: 10px;
		width: 107px;
		}
		.settings-box {
		
		width: 100%;
		float: left;
		}
		svg {
	  		overflow: hidden;
	  		width:100%;
	  		height:100%;
	  		background-color: #fff;
		}

		text {
		  font-weight: 300;
		  font-family: "Helvetica Neue", Helvetica, Arial, sans-serf;
		  font-size: 14px;
		  cursor:pointer;
		}

		.node{
			opacity: 0.5;
		  stroke: #111;
		  stroke-width: 2px;
		  fill: #fff;
		  cursor:pointer;
		}

		.edgeLabel rect {
			  fill: #fff;
		}

		.edgePath path {
		  stroke: #222;
		  stroke-width: 1.5px;
		  fill: none;
		}
		.status{
			color:#333;
		}
		#overlay-back {
		    position   : absolute;
		    top        : 0;
		    left       : 0;
		    width      : 100%;
		    height     : 100%;
		    background : #000;
		    opacity    : 0.6;
		    filter     : alpha(opacity=60);
		    z-index    : 5;
		    display    : none;
		}
		
		#overlay {
		    position : absolute;
		    top      : 200px;
		    left:0;
	        right:0;
	        margin-left:auto;
	        margin-right:auto;
		    width    : 300px;
		    height   : 100px;
		    z-index  : 10;
		    display  : none;
		} 

    </style>
</head>

<body>

<div id="overlay-back"></div>
<div id="overlay"><div class="panel panel-default">
  <div class="panel-body">
    	Rendering Graph Please Wait...	</div>
  </div>
</div> 

<svg>
    <g transform="translate(20,20) scale(0.4)"/>
</svg>

<div id="settings">
  <h3>GO Visualizer</h3>
  <div class="ref"></div>
  <label class="status">
  </label><br><br>
  <input type="checkbox" class="simple-relationship" name="" value="">No parent recomputation when expanded (Faster)<br>
  <label>
  <i style="margin-top:3px" class="glyphicon glyphicon-info-sign"></i>
  go_term id:
  </label>
  <input type="text" class="form-control settings-box" id="go-id">
  <label>
  
  <i style="margin-top:3px" class="glyphicon glyphicon-info-sign"></i>
  name:
  </label>
  <input type="text" class="form-control settings-box" id="go-name">
  
  
  <textarea style="margin-top:10px; display:none" class="form-control" id="submit-txt"></textarea>
  
  <button style="margin-top:10px; display:none" class="btn btn-default btn-primary form-control" id="match-path-btn" data-toggle="tooltip" data-animation="false" data-placement="top" title="Calculating based on children in the path of predicted nodes">Path Only</button>
  <button style="margin-top:10px; display:none" class="btn btn-default btn-primary form-control" id="match-path-score-btn" data-toggle="tooltip" data-animation="false" data-placement="top" title="Coloring nodes based on the probability scores">Color Score</button>
  
  <br>
  <!--<button style="margin-top:10px" class="btn btn-default btn-primary" id="match-path-score2-btn">Score Submit</button>-->
  <button style="margin-top:10px" class="btn btn-default form-control" id="reset-btn">Reset All</button>
  <button style="margin-top:10px" class="btn btn-default form-control" id="refresh-btn">Refresh</button>
	<br>
	<h3>Graph Direction</h3>
	<button style="margin-top:10px" class="btn btn-default form-control" id="rotate">Top-Down Graph</button>
	<button style="margin-top:10px" class="btn btn-default form-control" id="rotate-back">Left-Right Graph</button>
</div>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
<script>
// Create a new directed graph
$(".btn").tooltip();
$("#bp").tooltip();
$("#all").tooltip();
var g = new dagreD3.Digraph();
var expandedNodes = {};
// Add nodes to the graph. The first argument is the node id. The second is
// metadata about the node. In this case we're going to add labels to each of
// our nodes.
g.addNode("all",    { label: "<div class='term' style='padding: 10px;'>all</div>" });
g.addNode("GO:0008150", {label: "<div class='term' style='padding: 10px;'>GO:0008150<br>biological_process</div>"});
g.addNode("GO:0005575", {label: "<div class='term' style='padding: 10px;'>GO:0005575<br>cellular_component</div>"});
g.addNode("GO:0003674", {label: "<div class='term' style='padding: 10px;'>GO:0003674<br>molecular_function</div>"});

// Add edges to the graph. The first argument is the edge id. Here we use null
// to indicate that an arbitrary edge id can be assigned automatically. The
// second argument is the source of the edge. The third argument is the target
// of the edge. The last argument is the edge metadata.

//g.addEdge(null, "kspacey",   "swilliams", { label: "K-PAX" });
g.addEdge(null, "all","GO:0008150");
g.addEdge(null, "all","GO:0005575");
g.addEdge(null, "all","GO:0003674");
//console.log(g);
var layout = dagreD3.layout()
                    .nodeSep(10)
                    .rankDir("TD");
		//initialize the graph library api
		//set the initial scale and translate rate
		//should set both below and the svg dom in html
		var renderer = new dagreD3.Renderer();
		
		renderer.layout(layout).run(g, d3.select("svg g"));
		var svg = d3.select("svg");
		var zoom = d3.behavior.zoom().translate([20,20]).scale(.4);
		//console.log(svg);
 		d3.select("svg")
        .call(zoom.on("zoom", function() {
          var ev = d3.event;
          var scale = ev.scale;
          svg.select("g")
            .attr("transform", "translate(" + ev.translate + ") scale(" + scale + ")");
        }));
/*
var nodes = d3.selectAll(".node"); 
nodes.on("click",function(){
	console.log(nodes.select("tspan")[0]); 
});

$(".node g text tspan").click(function(){

	console.log(this);
});
console.log(nodes);   */

		//The event that hover a term node on the graph, should get the term_id and name
		
 		$("svg").on('mouseover', '.node g', function (event){
	 		var cur = $(this).children();
			//console.log(cur);
			var name = cur.text();
			//console.log(name);
			g.eachNode(function(u, value) {
			    var tmp_value = value.label;
			    tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
			    var tmp_name = value.label.replace(/<br>/g,' ');
			    tmp_name = tmp_name.replace(/<(?:.|\n)*?>/gm, '');
			    tmp_name = tmp_name.replace(/GO:[0-9]* /gm, '');
				//console.log(tmp_value);
    			if(name === tmp_value){
    			$("#go-id").val(u);
                $("#go-name").val(tmp_name);
    			
    			}
			});
 		});
 		
 		//The event that click on a node on the graph, should expand the node to show the children of that node...
 		$("svg").on('click', '.node', function (event){
	 		clickNode(this);
	 		var cur = this;
	 		
	 		setTimeout(function() {
		 		var tran = $(cur).attr( "transform" );
		 		tran = tran.replace(/[^0-9,.]*/gm, '');
		 		console.log(tran);
		 		var res = tran.split(",");
		 		scale = zoom.scale();
		 		var viewerWidth = $(document).width()-200;
		 		var viewerHeight = 600;
	
		        x = -res[0];
		        y = -res[1];
		        x = x * scale + viewerWidth / 2;
		        y = y * scale + viewerHeight / 2;
		        console.log(x+" "+y);
		        d3.select('g').transition()
		            .duration(500)
		            .attr("transform", "translate(" + x + "," + y + ")scale(" + scale + ")");
		            
		        zoom.scale(scale);
		        zoom.translate([x, y]);

			}, 1000);
 		});
		
 		//Check if current graph has any parent for the expanded children nodes...
		function getResults(Node, index, length){
		      //console.log(Node);
		      $.getJSON("http://dragon.bio.purdue.edu:4567/get_parent/"+Node+"", function(pjson){
		          //console.log(pjson);
		          for(var j=0; j<Object.keys(pjson).length;j++){
			      g.eachNode(function(u,value){
			          if(u == pjson[j].id){
			          	if(!g.hasEdge(pjson[j].id+"-"+Node)){
			          		g.addEdge(pjson[j].id+"-"+Node, pjson[j].id, Node);
			          		//console.log(pjson[j].id+"-"+Node);
			          	}
				  	   }
			      });
			      function transition(selection) {
        			return selection.transition().duration(400);
      			  }
			      //renderer.transition(transition);
				  
			  }
				if(index == length -1 ){renderer.layout(layout).run(g, d3.select("svg g"));
					if(color_score == 0){
						//paintParents();
						paintNode();
					}
					if(color_score === 1){
			        	//updateGraphScore();
			        	//renderer.layout(layout).run(g, d3.select("svg g"));
						paintNodeScore();
			        }
			        
				}
				
			
		      }); 
		   
		   }

		  function clickNode(clickedNode){
			var g_term;
			var name = $(clickedNode).find("g").text();
			//console.log(name);
			
			if(expandedNodes[name] == undefined){
				expandedNodes[name] = 0;
			}else{
				//$(".status").text("expanded");
				return;
			}
			
			g.eachNode(function(u, value) {
				//console.log(value);
				var tmp_value = value.label;
			    tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
			    
    			if(name === tmp_value){
    				g_term = u;
    			
    			
    			}
			});
			
			$(".status").text("loading "+g_term+"...");
			if(g_term == "all"){$(".status").text("done");return;}
			
			$.getJSON("http://dragon.bio.purdue.edu:4567/get_children/"+g_term+"",function(json){
    		
    		//console.log("finish"); 
			for(var i = 0; i< Object.keys(json).length; i++){
				//console.log(json[i].id);
 
				if(!g.hasNode(json[i].id)){g.addNode(json[i].id,{label:"<div class='term' style='padding: 10px; text-align:center;'>"+json[i].id+"<br>"+json[i].name.replace(/ /g,"<br>")+"</div>"});
				//check parents but affect speed of rendering
				if(!$('.simple-relationship').is(':checked'))getResults(json[i].id, i , Object.keys(json).length);
				
				}
				if(!g.hasEdge(g_term+"-"+json[i].id))g.addEdge(g_term+"-"+json[i].id, g_term, json[i].id);
				
		
			}
			function transition(selection) {
        		return selection.transition().duration(400);
      		}
			//transition
      		//renderer.transition(transition);
			renderer.layout(layout).run(g, d3.select("svg g"));
			if(color_score==0){
				//paintParents();
        		paintNode();
        	}
        	if(color_score === 1){
			        	//updateGraphScore();
			        	//renderer.layout(layout).run(g, d3.select("svg g"));
						paintNodeScore();
			}
			
        	$(".status").text("done");	
			
        	
			});
}
var color_score = 0;
var arrayNodes = new Array();
var hash = {};
var hash_score = {};
var term_hash = {};
var term_colors = new Array();

var parent_hash = {};
var total_go = 0;

$("#rotate").click(function(){
layout = dagreD3.layout()
                    .nodeSep(10).rankSep(200)
                    .rankDir("TD");
		renderer.layout(layout).run(g, d3.select("svg g"));
		if(color_score==0){
			//paintParents();
			paintNode();
		}
		if(color_score === 1){
			        	//updateGraphScore();
			        	//renderer.layout(layout).run(g, d3.select("svg g"));
						paintNodeScore();
						}
});

$("#rotate-back").click(function(){
layout = dagreD3.layout()
                    .nodeSep(10).rankSep(200)
                    .rankDir("LR");
		renderer.layout(layout).run(g, d3.select("svg g"));
		if(color_score==0){
			//paintParents();
			paintNode();
		}
		if(color_score === 1){
			        	//updateGraphScore();
			        	//renderer.layout(layout).run(g, d3.select("svg g"));
						paintNodeScore();
			        }
});

// paint all the targeted nodes
function paintNode(){

    var keys = Object.keys(parent_hash);
	var max = 0;
	var min = 1000;
	keys.forEach(function(k){
	    if(parent_hash[k]>max)max = parent_hash[k]; 
        if(parent_hash[k]<min)min = parent_hash[k];
	});
		  
		  //var color_string = "lightyellow, orange, deeppink, darkred";
		  //var color_string = "#FFD5D7, red";
	var color_string = "white,red";
		  //var color_string ="#41B7C5, #F03B20";
		  
	var colors = color_string.replace(/(, *| +)/g, ',').split(',');
	var steps = 100;
	colors = chroma.interpolate.bezier(colors);
	var cs = chroma.scale(colors).mode('lab').correctLightness(true);

	
	//console.log(parent_hash);
	arrayNodes.forEach(function(node){
		  //var nodeUI = graphics.getNodeUI(node);
		  //if(nodeUI != null)
		  //nodeUI.childNodes[0].attr('stroke','#555').attr('stroke-width','5');
		  g.eachNode(function(u, value) {
				//console.log(value);
    			if(node === u){
    				$(".node").each(function(index){
    					var name = $(this).find("g").text();
    					 var tmp_value = value.label;
						 tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
    					if(tmp_value === name){
    						//console.log("color"+this);
    						//$(this).find("rect").css("fill","#AEF89F");
    						//console.log(term_hash[u]);
    						if(parent_hash[u] != undefined){
	    						$(this).find("rect").css("stroke-width","5");
	    						$(this).find("rect").css("stroke","#333");
	    						//$(this).find("rect").css("fill",cs((parent_hash[u]-min)/(max-min)).hex());
	    						//$(this).find("rect").css("fill","#98FB98");
	    						$(this).find("rect").css("fill",cs((parent_hash[u]-min)/(max-min)).hex());	    						  
	    						
	    						
	    						//var buff = value.label.replace(/<div(?:.|\n)*?>/gm, '<div class=\'term\' style=\'padding: 10px; text-align:center; font-size:40\'>');
	    						
	    						//value.label = buff;
	    						
    						}
    						var term_u = new String(term_hash[u]);
    						if( term_hash[u] != undefined && term_u.indexOf(" ") == -1){
	    						//$(this).find("rect").css("stroke-width","10");
	    						//$(this).find("rect").css("stroke","#333");
	    						$(this).find("rect").css("fill",term_colors[term_hash[u]]);
	    					    var buff = value.label.replace(/<div(?:.|\n)*?>/gm, '<div class=\'term\' style=\'padding: 10px; text-align:center; font-size:40\'>');
	    						value.label = buff;
	    						
    						}else if(term_hash[u] != undefined)
    						
    						{
    							//console.log(term_hash[u]);
    							var str = term_hash[u];
	    						var res = str.split(" ");
	    						var tmp_str = "";
	    						for (var i = 0; i < res.length; i++) {
	    							
							        tmp_str += term_colors[res[i]];
							        if(i < res.length-1)tmp_str += " ,";
							        //else tmp_str +=  " "+1/res.length*100+"%";
							    }
							    console.log(tmp_str);
							    var buff = value.label.replace(/<div(?:.|\n)*?>/gm, "<div class=\'term\' style=\'background: -webkit-linear-gradient(right,"+ tmp_str+" ); background: -o-linear-gradient(right,"+ tmp_str+" );background: -moz-linear-gradient(right,"+ tmp_str+" ); background: linear-gradient(right,"+ tmp_str+" ); padding: 10px; text-align:center; font-size:40\'>");
	    						value.label = buff;
	    						
    						}
    						
    						
    					    						
    						
    						
    					}
    				});
    			
    			}
			});
		});
	
	
	}
	
		
	// paint all the targeted nodes based on score
	function paintNodeScore(){
		
		  var keys = Object.keys(hash_score);
		  var max = 0;
		  var min = 1000;
		  keys.forEach(function(k){
		     if(hash_score[k]>max)max = hash_score[k]; 
		      if(hash_score[k]<min)min = hash_score[k];
		  });
		  
		  //var color_string = "lightyellow, orange, deeppink, darkred";
		  //var color_string = "#FFD5D7, red";
		  var color_string = "lightyellow,red";
		  //var color_string ="#41B7C5, #F03B20";
		  
		  var colors = color_string.replace(/(, *| +)/g, ',').split(',');
		  var steps = 100;
		  colors = chroma.interpolate.bezier(colors);
		  var cs = chroma.scale(colors).mode('lab').correctLightness(true);
		   
		  //var colors = get_hex(10);
		  
        	keys.forEach(function(k){
		     
		   
		    g.eachNode(function(u, value) {
				//console.log(value);
    			if(k === u){
    				$(".node").each(function(index){
    					var name = $(this).find("g").text();
    					var tmp_value = value.label;
						 tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
    					if(tmp_value === name){
    						//console.log("color"+colors[100-Math.round(hash_score[k]*100)]);
    						//value.label = name + "("+hash_score[k]+")";
    						$(this).find("rect").css("fill",cs((hash_score[k]-min)/(max-min)).hex());
    						//$(this).find("g ").append("<text>"+hash_score[k]+"</text>");
    					}
    				});
    			
    			}
			});
		  
		  });
		  
		  
	
	
	}
	
	function updateGraphScore(){
		var keys = Object.keys(hash_score);
		keys.forEach(function(k){
		     
		   
		    g.eachNode(function(u, value) {
				//console.log(value);
    			if(k === u){
    				$(".node").each(function(index){
    					var name = $(this).find("g").text();
    					var tmp_value = value.label;
    					//tmp_value = tmp_value.replace(/<br>/g," ");
						tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
    					if(tmp_value === name){
    						//console.log(name);
    						//console.log("color"+colors[100-Math.round(hash_score[k]*100)]);
    						//value.label = value.label + "<center>(<b>"+hash_score[k]+"</b>)</center>";
    						
    						//make the predicted terms bigger
    						var buff = value.label.replace(/<div(?:.|\n)*?>/gm, '<div class=\'term\' style=\'padding: 10px; text-align:center; font-size:40\'>');
    						value.label = buff + "<center><span style=\"font-size:50; padding:15px;\"><b>"+(hash_score[k]*100).toFixed(1)+"%</b></span></center>";
    						
    					}
    				});
    			
    			}
			});
		  
		  });
		  
	}

		function get_hex(number){
        		var numberOfItems = number;
				var rainbow = new Rainbow(); 
				rainbow.setNumberRange(1, numberOfItems);
				rainbow.setSpectrum('red', 'white');
				var s = new Array;
				for (var i = 1; i <= numberOfItems; i++) {
    				var hexColour = rainbow.colourAt(i);
    				s.push('#' + hexColour);
    				//s += '#' + hexColour + ', ';
				}
				return s;
        }
        
        function paintParents(){
          //console.log(hash);
          var keys = Object.keys(hash);
		  var max = 0;
		  keys.forEach(function(k){
		     if(hash[k]>max)max = hash[k]; 
		  });
		  //console.log(max);
		  if(max>0){
			 var colors = get_hex(max+2);
			
			  
        	keys.forEach(function(k){
		     
		   
		    g.eachNode(function(u, value) {
				//console.log(value);
    			if(k === u){
    				$(".node").each(function(index){
    					var name = $(this).find("g").text();
    					var tmp_value = value.label;
						tmp_value = tmp_value.replace(/<(?:.|\n)*?>/gm, '');
    					if(tmp_value === name){
    						//console.log("color"+this);
    						$(this).find("rect").css("fill",colors[(max-hash[k])]);
       					}
    				});
    			
    			}
			});
		  
		  });
		  }
		  
        }
/*
 setInterval(function(){
 	paintParents();
 	paintNode();
 },500);*/

$("#reset-btn").click(function(event){

event.preventDefault();
g = new dagreD3.Digraph();
expandedNodes = {};
arrayNodes = new Array();
hash = {};
color_score = 0;

// Add nodes to the graph. The first argument is the node id. The second is
// metadata about the node. In this case we're going to add labels to each of
// our nodes.
g.addNode("all",    { label: "<div class='term' style='padding: 10px;'>all</div>" });
g.addNode("GO:0008150", {label: "<div class='term' style='padding: 10px;'>GO:0008150<br>biological_process</div>"});
g.addNode("GO:0005575", {label: "<div class='term' style='padding: 10px;'>GO:0005575<br>cellular_component</div>"});
g.addNode("GO:0003674", {label: "<div class='term' style='padding: 10px;'>GO:0003674<br>molecular_function</div>"});


// Add edges to the graph. The first argument is the edge id. Here we use null
// to indicate that an arbitrary edge id can be assigned automatically. The
// second argument is the source of the edge. The third argument is the target
// of the edge. The last argument is the edge metadata.

//g.addEdge(null, "kspacey",   "swilliams", { label: "K-PAX" });
g.addEdge(null, "all","GO:0008150");
g.addEdge(null, "all","GO:0005575");
g.addEdge(null, "all","GO:0003674");
function transition(selection) {
        		return selection.transition().duration(400);
      		}
			//transition
//renderer.transition(transition);
renderer.layout(layout).run(g, d3.select("svg g"));
		
});

  $("#match-path-btn").click(function(event){
  			 //clear hash array
  			expandedNodes = {};
  			hash = {};
  			//color_score = 0;
    		color_score = 0;
    		
    		g = new dagreD3.Digraph();
            event.preventDefault();
            var temp_terms = $("#submit-txt").val().split("\n");
            
            var re = /GO\:\d{7}/;
            var g_terms = new Array();
            temp_terms.forEach(function(entry){
             //   console.log(entry);
            var tmp = re.exec(entry);
            //console.log(tmp);
           
            if(tmp!=null)g_terms.push(tmp[0]);
            });
   
            count = 0;
            var node_index = 0;
            g_terms.forEach(function(id){
            	node_index ++;
            	//window.setTimeout(function(){
            	arrayNodes.push(id);
            	matchPath(id,node_index,g_terms.length,0);
            	//},500);
            	count++;
           
            });
            //console.log(count);

    });
    

    $("#match-path-score-btn").click(function(event){
  			expandedNodes = {};
  			hash_score = {};
  			color_score = 1;
    		
    		g = new dagreD3.Digraph();
            event.preventDefault();
            var temp_terms = $("#submit-txt").val().split("\n");
            
            var re = /GO\:\d{7}/;
            var prob = /\d*(\.\d+)?$/;
            var g_terms = new Array();
            temp_terms.forEach(function(entry){
                //console.log("entry:"+entry);
            var tmp = re.exec(entry);
            var prob_temp = prob.exec(entry);
            
            //console.log(prob_temp);
           	if(tmp!=null && prob_temp != null){
           		if(hash_score[tmp[0]] == undefined){
				hash_score[tmp[0]] = prob_temp[0];
				}
			}
            if(tmp!=null)g_terms.push(tmp[0]);
            
            
            });
   				
           	var node_index = 0;
            g_terms.forEach(function(id){
            	node_index ++;
            	//window.setTimeout(function(){
            	arrayNodes.push(id);
            	matchPath(id,node_index,g_terms.length,1);
            	//},500);

            });
            //console.log(hash_score);
            
    });
    
    $("#match-path-score2-btn").click(function(event){
  			expandedNodes = {};
  			hash_score = {};
    		color_score = 1;
    		
    		g = new dagreD3.Digraph();
            event.preventDefault();
            var temp_terms = $("#submit-txt").val().split("\n");
            
            var re = /GO\:\d{7}/;
            var prob = /\d*(\.\d+)?$/;
            
            var g_terms = new Array();
            temp_terms.forEach(function(entry){
            	var row = entry.split("\t");
            	
               // console.log("entry:"+row[0]);
            	var tmp = "GO:"+row[0];
            	var prob_temp = row[9];
            
            //console.log(prob_temp);
           	if(tmp!=null && prob_temp != null){
           		if(hash_score[tmp] == undefined){
				hash_score[tmp] = prob_temp;
				}
			}
            if(tmp!=null)g_terms.push(tmp);
            
            
            });
   				
           	var node_index = 0;
            g_terms.forEach(function(id){
            	node_index ++;
            	//window.setTimeout(function(){
            	arrayNodes.push(id);
            	matchPath(id,node_index,g_terms.length,1);
            	//},500);

            });
           // console.log(hash_score);
            
    });
    
    // only showing nodes on path
    function matchPath(term,count,length,color_score){
        	 var g_term = term;
      $.getJSON("http://dragon.bio.purdue.edu:4567/get_path/"+g_term+"",function(json){
      	
      	total_go++;
        console.log(term+" "+count+" "+length+" "+total_go);
        var myjson = [];
        var counter = 0;
		for(var i = 0; i< Object.keys(json).length; i++){
			if(hash[json[i].id] == undefined){
				hash[json[i].id] = 0;
			}
			else hash[json[i].id]++;
			var my_term_name;
			if(json[i].name.split(",").length - 1 >0){
				my_term_name = json[i].name.replace(/,/g,",<br>");
				//my_term_name = json[i].name.replace(/ /g,"<br>");
			}
			else{
				my_term_name = json[i].name.replace(/ /g,"<br>");
			}
			//if(json[i].id=="all")continue;
			//font-size:50
			
			if(!g.hasNode(json[i].id))g.addNode(json[i].id,{label:"<div class='term' style='padding: 10px; text-align:center; '>"+json[i].id+"<br>"+my_term_name+"</div>"});
			
 	 		
 
 	 	for(var j = 0; j< Object.keys(json[i].children).length; j++){
	 	
	 		my_term_name;
			if(json[i].children[j].name.split(",").length - 1 >0){
				my_term_name = json[i].children[j].name.replace(/,/g,"<br>");
				//my_term_name = json[i].children[j].name.replace(/ /g,"<br>");
			}
			else{
				my_term_name = json[i].children[j].name.replace(/ /g,"<br>");
			}
		
		if(!g.hasNode(json[i].children[j].id))g.addNode(json[i].children[j].id,{label:"<div class='term' style='padding: 10px; text-align:center;'>"+json[i].children[j].id+"<br>"+my_term_name+"</div>"});
		
		
		
		if(!g.hasEdge(json[i].id+"-"+json[i].children[j].id))g.addEdge(json[i].id+"-"+json[i].children[j].id, json[i].id, json[i].children[j].id);
		}
		
		}
		function defaultTransition(selection) {
		  return selection;
		}

		function continueExecution(){
		
		}
		//console.log(renderer.transition(defaultTransition));
		//console.log("aaaa:"+count+" "+length);
		//render.layout(layout).run(g, d3.select("svg g"));
		if(total_go == length){
		
		
		if(length>5 && length < 10)layout = dagreD3.layout()
                    .nodeSep(30).rankSep(200)
                    .rankDir("TD");
		
		if(length>10)layout = dagreD3.layout()
                    .nodeSep(50).rankSep(400)
                    .rankDir("TD");
        
		
		renderer.layout(layout).run(g, d3.select("svg g"));
		$(".status").text("done");
			
		if(color_score === 0){
			//paintParents();
			
        	paintNode();
        	renderer.layout(layout).run(g, d3.select("svg g"));
			paintNode();
        	
        	}
        else if(color_score === 1){
        	updateGraphScore();
        	renderer.layout(layout).run(g, d3.select("svg g"));
			paintNodeScore();
        	}
       	
       	$(".status").text("done");
		//$( "#refresh-btn" ).trigger( "click" );
		$('#overlay, #overlay-back').fadeOut(500);
		
		var cur = $(".node")[0];
	 		
	 		setTimeout(function() {
		 		var tran = $(cur).attr( "transform" );
		 		tran = tran.replace(/[^0-9,.]*/gm, '');
		 		console.log(tran);
		 		var res = tran.split(",");
		 		scale = zoom.scale();
		 		var viewerWidth = $(document).width()-200;
		 		var viewerHeight = 200;
	
		        x = -res[0];
		        y = -res[1];
		        x = x * scale + viewerWidth / 2;
		        y = y * scale + viewerHeight / 2;
		        console.log(x+" "+y);
		        d3.select('g').transition()
		            .duration(500)
		            .attr("transform", "translate(" + x + "," + y + ")scale(" + scale + ")");
		            
		        zoom.scale(scale);
		        zoom.translate([x, y]);

			}, 0);
       	}
       
	
		
		  
 
	});
}

$("#refresh-btn").click(function(){
	
	renderer.layout(layout).run(g, d3.select("svg g"));
	paintNode();
});

//"#"+((1<<24)*Math.random()|0).toString(16)

$.getJSON("http://kiharalab.org/web/inc/results.php?id=<%= job_id %>&format=json&category=<%= category %>",function(json){
	$('#overlay, #overlay-back').fadeIn(500);
	$(".status").text("rendering graph...");
	
	console.log(json);
	for(var i = 0; i< Object.keys(json).length-1; i++){
		
		for(var j=0; j<Object.keys(json[i].protein).length;j++ ){
			
			if(term_hash[json[i].protein[j].id] == undefined && term_hash[json[i].protein[j].id] != -1){
				//console.log(json[i].protein[j].id);
				term_hash[json[i].protein[j].id] = i;
				
				
			}else{
				console.log(json[i].protein[j].id);
				//term_hash[json[i].protein[j].id] = -1;
				term_hash[json[i].protein[j].id] += " ";
				term_hash[json[i].protein[j].id] += i;
				
				if(parent_hash[json[i].protein[j].id] == undefined){
					parent_hash[json[i].protein[j].id] = 1;
				}else{
					parent_hash[json[i].protein[j].id] += 1;
				}
			}
			
		}
		
		var color_tmp = randomColor({luminosity: 'light'});
		term_colors.push(color_tmp);
		var txt = $(".ref").html();
		txt += '<div class="pro" style="margin-right:10px;display:inline-block;">'+json[i].protein[0].protein+': <span style="display:inline-block;width:15px;height:15px;background-color:'+color_tmp+';" class="color-blk"></span></div>';
		$(".ref").html(txt);
		
		
	}
	
	var last = Object.keys(json).length-1;
		for(var j=0; j<Object.keys(json[last].parents).length;j++ ){
			if(parent_hash[json[last].parents[j].id] == undefined){
				parent_hash[json[last].parents[j].id] = json[last].parents[j].count;
			}
			else{
				//parent_hash[json[last].parents[j].id] += 1;
			}
			
		}
		
		
	for(var i=0; i<Object.keys(parent_hash).length;i++){
		//console.log(term_hash[Object.keys(term_hash)[i]]);
			   var prev = $("#submit-txt").text();
			   //console.log(node);
			   prev += Object.keys(parent_hash)[i];
			   prev += " ";
			   prev += '\n';
			   arrayNodes.push(Object.keys(parent_hash)[i]);
			   
			   //$("#submit-txt").text(prev);
			   //$( "#match-path-btn" ).trigger( "click" );
		
	}
	
	
	for(var i=0; i<Object.keys(term_hash).length;i++){
		//console.log(term_hash[Object.keys(term_hash)[i]]);
			   var prev = $("#submit-txt").text();
			   //console.log(node);
			   prev += Object.keys(term_hash)[i];
			   prev += " ";
			   prev += '\n';
			   $("#submit-txt").text(prev);
			   
		
	}
	
	$( "#match-path-btn" ).trigger( "click" );
	
	
});




</script>
</body>

</html>
